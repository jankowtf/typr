% Generated by roxygen2 (4.0.2): do not edit by hand
\name{validateType}
\alias{validateType}
\title{Validate Type (S3)}
\usage{
validateType(self, value, numint = TRUE, from_null = TRUE, to_null = TRUE,
  strict = c(2, 1, 0))
}
\arguments{
\item{self}{\code{\link{environment}}.
Invisible object part.}

\item{value}{\code{\link{ANY}}.
New assignment value.}

\item{numint}{\code{\link{logical}}.
\code{TRUE}: do not distinguish between types (classes) \code{numeric}
and \code{integer};
\code{FALSE}: threat them as two different types (classes).
Default: \code{TRUE} as this seems to make most sense in practical
applications.}

\item{from_null}{\code{\link{logical}}.
\code{TRUE}: any type (class) is valid to overwrite an initial \code{NULL}
value.
\code{FALSE}: this would be regarded as a type (class) mismatch.
Default: \code{TRUE} as this seems to make most sense in practical
applications.}

\item{to_null}{\code{\link{logical}}.
\code{TRUE}: value of \code{NULL} is always valid type (class) regardless
of the type (class) that was stored at the initial assignment operation.
\code{FALSE}: this would be regarded as a type (class) mismatch.
Default: \code{TRUE} as this seems to make most sense in practical
applications.}

\item{strict}{\code{\link{numeric}}.
     How to handle type (class) mismatches:
\itemize{
  \item{\code{0}: } {ignore without warning}
  \item{\code{1}: } {ignore with Warning}
  \item{\code{2}: } {stop with error}
}
     Default: \code{2}.}

\item{...}{Further arguments to be passed to subsequent functions/methods.}
}
\description{
Validates type (class) of an assignment value for a typed object value.
}
\details{
The type (class) of the object value as stored at the initial assignment
operation via \code{\link{setTyped}} is checked against the type (class)
of \code{value}. Type (class) mismatches trigger an error or a warning
depending on the value of \code{strict}.
}
\examples{
\dontrun{

## TODO: add example

}
}
\author{
Janko Thyson \email{janko.thyson@rappster.de}
}
\references{
\url{http://github.com/Rappster/typr}
}
\seealso{
\code{
    \link[typr]{setTyped}
}
}

